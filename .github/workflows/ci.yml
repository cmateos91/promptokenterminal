name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CARGO_TERM_COLOR: always

jobs:
  # 🧪 Frontend Testing and Quality
  frontend-test:
    name: 🎮 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: 📚 Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: 🔍 Lint check
        working-directory: ./frontend
        run: npm run lint
        
      - name: 🧪 Run unit tests
        working-directory: ./frontend
        run: npm run test:coverage
        
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          
  # 🏗️ Build and Deploy Test
  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: frontend-test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: 📚 Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: 🏗️ Build application
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_SOLANA_NETWORK: devnet
          VITE_SOLANA_RPC_URL: https://api.devnet.solana.com
          VITE_PROMPT_TOKEN_MINT: 5gusfEv5k4jR32Nnj92ftqj8u4deKk8KxCUZudZcnWxF
          VITE_MINIMUM_TOKEN_BALANCE: 500
          
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  # 🎭 E2E Testing with Playwright
  e2e-test:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: 📚 Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
        
      - name: 🏗️ Build for E2E
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_SOLANA_NETWORK: devnet
          VITE_SOLANA_RPC_URL: https://api.devnet.solana.com
          VITE_PROMPT_TOKEN_MINT: 5gusfEv5k4jR32Nnj92ftqj8u4deKk8KxCUZudZcnWxF
          VITE_MINIMUM_TOKEN_BALANCE: 500
          
      - name: 🧪 Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e
        
      - name: 📊 Upload E2E report
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

  # 🦀 Smart Contracts Testing
  contracts-test:
    name: 🦀 Smart Contracts
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🦀 Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          
      - name: 📦 Setup Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.17.0/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          
      - name: 📦 Setup Anchor CLI
        run: |
          npm install -g @coral-xyz/anchor-cli@0.29.0
          
      - name: 🔍 Rust format check
        working-directory: ./contracts
        run: cargo fmt --all -- --check
        
      - name: 🔍 Clippy check
        working-directory: ./contracts
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: 🧪 Run contract tests
        working-directory: ./contracts
        run: anchor test --skip-local-validator

  # 📱 Mobile Testing (Matrix)
  mobile-test:
    name: 📱 Mobile Tests
    runs-on: ubuntu-latest
    needs: build-test
    strategy:
      matrix:
        device: ['iPhone 12', 'Pixel 5', 'iPad']
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: 📚 Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: 🎭 Install Playwright
        working-directory: ./frontend
        run: npx playwright install --with-deps
        
      - name: 📱 Run mobile E2E tests
        working-directory: ./frontend
        run: npm run test:e2e:mobile
        env:
          DEVICE: ${{ matrix.device }}

  # 🚀 Auto-deploy to Vercel (only on main)
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [frontend-test, e2e-test, contracts-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Vercel
        uses: vercel/action@v24
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

  # 🏷️ Release Management
  release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🏷️ Generate changelog and release
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 🛡️ Security Scanning
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🔍 Run npm audit
        working-directory: ./frontend
        run: npm audit --audit-level moderate
        
      - name: 🛡️ Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: 🛡️ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2